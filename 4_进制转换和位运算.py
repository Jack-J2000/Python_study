# 利用Python进行数据间的转换

'''
浮点型数据无法转成其他进制
输出值看前缀：
0b  二进制
0o  八进制
0x  十六进制
默认 十进制
'''
a = 149

print(bin(a))  # binary 转二进制  (无论当前参数是几进制的)
print(oct(a))  # 转八进制
print(hex(a))  # 转十六进制

'''
思考：
1.n=0x558，十进制输出？
2.n=0x558，转成二进制？转成八进制？
'''
n = 0x558
print(type(n))
print(n)  # 直接输出，就是默认转成了十进制
print('二进制：' + str(bin(n)))
print('八进制：' + str(oct(n)))

# 位运算   一般将其转换成二进制进行运算
'''
&    |   ^    ~   <<    >> 
&   类似     and

 1byte = 8bit
'''
n1 = 0b0110
n2 = 0b0010
print(n1 & n2)  # 结果   0b0010    与运算
print(n1 | n2)  # 结果   0b0110    或运算
print(n1 ^ n2)
print(5 ^ 9)  # 转为二进制      0101 ^  1001   进行异或运算  结果1100
print(~n1)  # 对n1进行取反    得1 1001，第一个为符号位  说明为负数；已知二进制负数，求十进制负数
print(~7)
print(~-4) #-4转为二进制为

'''
负数    减一，取反==>  正数

正数的原码，取反，加一，得补码  ==  负数的二进制
故若已知负数的二进制，要求十进制时。保留符号位为负数，再将后面的二进制，减一，取反，得十进制，带上符号位为负数
'''

n = 12
print(n << 1)  # 12*2   二进制左移一位
print(n << 2)  # 12*2*2
print(n << 3)  # 12*2*2*2
print(n >> 1)  # 二进制右移一位，相当于12/2
print(n >> 2)  # 12/2/2
